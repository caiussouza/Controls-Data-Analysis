# -*- coding: utf-8 -*-
"""Exemplo de análise do IMU do celular

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1YwNWJwPMG-MFSTwxanpFZfA88BV9for0

# Exemplo de análise baseada num teste aleatório dos sensores de um celular
## Os arquivos contendo dados (datasets) devem ser carregados no repositório no GitHub: https://github.com/caiussouza/Controls-Data-Analysis

Inclusão das bibliotecas para análise de dados


*   **pandas** - operações com dataframes
*   **matplotlib** - visualização gráfica dos dados
"""

import pandas as pd
import matplotlib.pyplot as plt

"""Inclusão do dataset a partir do repositório no Github

* Entre no repositório

https://github.com/caiussouza/Controls-Data-Analysis
* Clique no arquivo a ser lido. No exemplo, é o "primeira_analise.csv"
* Clique em "Raw" e copie a url. No exemplo, é

https://raw.githubusercontent.com/caiussouza/Controls-Data-Analysis/main/primeira_analise.csv
* Utilize o método .read_csv('INSIRA URL')



"""

url_dataframe = 'https://raw.githubusercontent.com/caiussouza/Controls-Data-Analysis/main/primeira_analise.csv'
teste = pd.read_csv(url_dataframe)

"""Visualizando o resumo do dataset

Exemplos:

*   **teste.info()** - exibe informações sobre o dataframe, incluindo o número de linhas e colunas, nomes e tipos de dados das colunas e o uso de memória.
*   **teste.head()** - exibe as 5 primeiras linhas
*   **teste.describe()** - exibe informações estatísticas sobre o dataframe, como médias, desvios padrões


"""

teste.info()

teste.head()

teste.describe()

"""Adiciona o "time" como índice do dataframe e transforma para um formato Tempo que pode ser processado e "resampleado"
"""

time_offset = pd.Timestamp('00:00:00')

teste_time = teste.time

teste_time = time_offset + pd.to_timedelta(teste['time'], unit='s')
teste.time = teste_time

teste_resampled = teste.set_index('time')

teste_resampled = teste_resampled.resample('100ms').mean()

"""Os dados são fornecidos em "g". Aqui, há a conversão para m/s²"""

g = 9.8
teste_resampled_in_g = teste_resampled
teste_resampled_in_g[['gFx', 'gFy', 'gFz']] = teste_resampled_in_g[['gFx', 'gFy', 'gFz']] * g

"""Aqui há o plot conjunto dos três valores do acelerômetro. Abaixo, uma visão separada"""

x = teste_resampled_in_g.index
y_in_x = teste_resampled_in_g.gFx
y_in_y = teste_resampled_in_g.gFy
y_in_z = teste_resampled_in_g.gFz
plt.plot(x, y_in_x)
plt.plot(x, y_in_y)
plt.plot(x, y_in_z)

fig, axs = plt.subplots(1, 3, figsize=(12, 4))
axs[0].plot(x, y_in_x)
axs[0].set_title('Accelerometer in x')
axs[0].set_xlabel('Time (100ms)')
axs[0].set_ylabel('gFx')
axs[1].plot(x, y_in_y)
axs[1].set_title('Accelerometer in y')
axs[1].set_xlabel('Time (100ms)')
axs[1].set_ylabel('gFy')
axs[2].plot(x, y_in_z)
axs[2].set_title('Accelerometer in z')
axs[2].set_xlabel('Time (100ms)')
axs[2].set_ylabel('gFz')
fig.tight_layout()